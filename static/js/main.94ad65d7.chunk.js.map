{"version":3,"sources":["page/index.ts","routers/index.ts","App.tsx","serviceWorker.ts","index.tsx","config/index.ts"],"names":["HomeIndex","lazy","Routers","path","config","preLink","component","root","notExect","withRouter","map","router","exact","key","push","to","Boolean","window","location","hostname","match","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","nftAddress"],"mappings":"uNACMA,EAAYC,gBAAK,kBAAM,gC,OCgBvBC,EAAwB,CAPC,CAC7BC,KAAMC,IAAOC,QAAU,IACvBC,UAAWN,EACXO,KAAM,GACNC,UAAU,I,YCSGC,mBAjBf,WACE,OACE,kBAAC,IAAD,KACGP,EAAQQ,KAAI,SAACC,GAAD,OACX,kBAAC,IAAD,CACEC,OAAQD,EAAOH,SACfK,IAAKF,EAAOR,KACZA,KAAMQ,EAAOR,KACbG,UAAWK,EAAOL,eAItB,kBAAC,IAAD,CAAUQ,MAAI,EAACF,OAAK,EAACG,GAAIX,IAAOC,QAAU,U,QCN5BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,+BAClB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BEjJb,KACbC,WAAY,6CAEZ/B,QAAS,M","file":"static/js/main.94ad65d7.chunk.js","sourcesContent":["import { lazy } from \"react\";\nconst HomeIndex = lazy(() => import(\"./home/homeIndex\"));\nexport { HomeIndex };\n","import React from \"react\";\nimport { HomeIndex } from \"../page\";\nimport config from \"../config/index\";\nexport type RouterType = {\n  path: string;\n  component: React.LazyExoticComponent<any>;\n  root: string[];\n  notExect?: boolean;\n};\n\nconst HomeRouter: RouterType = {\n  path: config.preLink + \"/\",\n  component: HomeIndex,\n  root: [],\n  notExect: false,\n};\n\nconst Routers: RouterType[] = [HomeRouter];\nexport { Routers };\n","import React from \"react\";\nimport { Redirect, Route, Switch, withRouter } from \"react-router\";\nimport { Routers } from \"./routers\";\nimport \"lib-flexible\";\nimport \"./App.less\";\nimport config from \"./config/index\";\nfunction App() {\n  return (\n    <Switch>\n      {Routers.map((router) => (\n        <Route\n          exact={!router.notExect}\n          key={router.path}\n          path={router.path}\n          component={router.component}\n        ></Route>\n      ))}\n      {/* 默认路由 */}\n      <Redirect push exact to={config.preLink + \"/\"} />\n    </Switch>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Suspense fallback={<div></div>}>\n      <App />\n    </Suspense>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","export default {\n  nftAddress: \"0x17318b81df35eb599a4a5cc86eeef2f13dc4d266\",\n  // nftAddress: \"0xd60a6951F2463aaf477131d1A6C7D88C5a2C718B\",\n  preLink: \"\",\n};\n"],"sourceRoot":""}